@startuml Patrones_Sistema_Forestal
skinparam linetype ortho
skinparam nodesep 80
skinparam ranksep 100

' Estilo general
skinparam class {
    BackgroundColor White
    BorderColor Black
    ArrowColor Black
}

skinparam note {
    BackgroundColor White
    BorderColor Black
}

' ============================================
' PATRON SINGLETON
' ============================================

package "Patron Singleton" {
    note as N_Singleton
        Se asegura de que una clase
        tenga solo una instancia global
        con acceso thread-safe
    end note
    
    class CultivoServiceRegistry << Singleton >> {
        {static} -_instance : CultivoServiceRegistry
        {static} -_lock : Lock
        -_pino_service : PinoService
        -_olivo_service : OlivoService
        -_lechuga_service : LechugaService
        -_zanahoria_service : ZanahoriaService
        -_absorber_agua_handlers : dict
        -_mostrar_datos_handlers : dict
        __
        {static} +__new__(cls) : CultivoServiceRegistry
        {static} +get_instance() : CultivoServiceRegistry
        -_inicializar_servicios() : void
        +absorber_agua(cultivo : Cultivo) : int
        +mostrar_datos(cultivo : Cultivo) : void
    }
}

' ============================================
' PATRON FACTORY
' ============================================

package "Patron Factory" {
    note as N_Factory
        Encapsula la creacion de objetos
        desacoplando el cliente de las
        clases concretas
    end note
    
    class CultivoFactory << Factory >> {
        {static} +crear_cultivo(especie : String) : Cultivo
        __
        {static} -_crear_pino() : Pino
        {static} -_crear_olivo() : Olivo
        {static} -_crear_lechuga() : Lechuga
        {static} -_crear_zanahoria() : Zanahoria
    }
    
    abstract class Cultivo {
        #_superficie : float
        #_agua : int
        __
        +get_superficie() : float
        +get_agua() : int
        +set_agua(agua : int) : void
    }
    
    class Pino {}
    class Olivo {}
    class Lechuga {}
    class Zanahoria {}
}

' ============================================
' PATRON STRATEGY
' ============================================

package "Patron Strategy" {
    note as N_Strategy
        Define familias de algoritmos
        intercambiables encapsulados
    end note
    
    interface AbsorcionAguaStrategy {
        +calcular_absorcion(fecha, temp, humedad, cultivo) : int
    }
    
    class AbsorcionSeasonalStrategy {}
    class AbsorcionConstanteStrategy {}
    abstract class CultivoService {}
}

' ============================================
' PATRON OBSERVER
' ============================================

package "Patron Observer" {
    note as N_Observer
        Notifica cambios automaticamente
        a los observadores suscritos
    end note
    
    interface Observer<T> {
        +actualizar(evento : T) : void
    }
    
    abstract class Observable<T> {
        #_observadores : List<Observer<T>>
        +agregar_observador(obs : Observer<T>) : void
        +eliminar_observador(obs : Observer<T>) : void
        +notificar_observadores(evento : T) : void
    }
    
    class TemperaturaReaderTask {}
    class HumedadReaderTask {}
    class ControlRiegoTask {}
}

' ============================================
' MAIN (Cliente)
' ============================================

class Main {
    +main() : void
}

' ============================================
' RELACIONES PATRON FACTORY
' ============================================

CultivoFactory .down.> Cultivo : <<creates>>
Cultivo <|-- Pino
Cultivo <|-- Olivo
Cultivo <|-- Lechuga
Cultivo <|-- Zanahoria

' ============================================
' RELACIONES PATRON STRATEGY
' ============================================

AbsorcionAguaStrategy <|.. AbsorcionSeasonalStrategy
AbsorcionAguaStrategy <|.. AbsorcionConstanteStrategy
CultivoService o-right- AbsorcionAguaStrategy : usa

' ============================================
' RELACIONES PATRON OBSERVER
' ============================================

Observable <|-- TemperaturaReaderTask
Observable <|-- HumedadReaderTask
Observer <|.. ControlRiegoTask
TemperaturaReaderTask -right-> Observer : notifica
HumedadReaderTask -right-> Observer : notifica

' ============================================
' RELACIONES CON MAIN
' ============================================

Main -down-> CultivoFactory : usa
Main -down-> CultivoServiceRegistry : usa
Main -down-> TemperaturaReaderTask : crea
Main -down-> HumedadReaderTask : crea
Main -down-> ControlRiegoTask : crea

' ============================================
' RELACIONES ENTRE PATRONES
' ============================================

CultivoServiceRegistry -down-> CultivoService : contiene

@enduml
